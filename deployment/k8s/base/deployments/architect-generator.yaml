apiVersion: apps/v1
kind: Deployment
metadata:
# User is required for Rancher to create the services automatically
  annotations:
    field.cattle.io/creatorId: user-qkgd2
  name: architect-generator
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-architectonic-architect-generator
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: apps.deployment-architectonic-architect-generator
    spec:
      affinity: {}
      containers:
      - envFrom:
        - configMapRef:
            name: environment-configmap
            optional: false
        - configMapRef:
            name: architect-generator-configmap
            optional: false
        - configMapRef:
            name: eventbus-settings-configmap
            optional: false
        - secretRef:
            name: eventbus-settings-secret
            optional: false
        - secretRef:
            name: architect-generator-secret
            optional: false
        image: evolynsky/architectonic:argeneratorapi
        imagePullPolicy: Always
        name: architect-generator
        ports:
        - containerPort: 80
          name: 80tcp
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      initContainers:
      - command: ['sh', '-c', 'until nslookup sql-data-generatordb; do echo waiting for sql-data-generatordb; sleep 2; done;']
        image: busybox:latest
        imagePullPolicy: Always
        name: init-architect-generatordb
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
// <auto-generated />
using System;
using Ar.Generator.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Ar.Generator.Repository.Migrations
{
    [DbContext(typeof(GeneratorDbContext))]
    [Migration("20210826090129_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ApiEndpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("AuthorizationRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("EndpointType")
                        .HasColumnType("integer");

                    b.Property<int>("MicroserviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MicroserviceId");

                    b.ToTable("ApiEndpoint");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.GatewayRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApiGatewayId")
                        .HasColumnType("integer");

                    b.Property<string>("DownstreamHost")
                        .HasColumnType("text");

                    b.Property<string>("DownstreamPathTemplate")
                        .HasColumnType("text");

                    b.Property<string>("DownstreamPort")
                        .HasColumnType("text");

                    b.Property<string>("DownstreamScheme")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpstreamHttpMethods")
                        .HasColumnType("text");

                    b.Property<string>("UpstreamPathTemplate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiGatewayId");

                    b.ToTable("GatewayRoute");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActivityHandlerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProcessInstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("SubscriptionTopic")
                        .HasColumnType("text");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("TimeoutPattern")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivityHandlerId")
                        .IsUnique();

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("BpmnActivity");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivityHandler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompensatingTransactionEndpoint")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("NotifyOnFailure")
                        .HasColumnType("boolean");

                    b.Property<int>("ResponsibleApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionEndpoint")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleApplicationId");

                    b.ToTable("BpmnActivityHandler");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivityVar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BpmnActivityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BpmnActivityId");

                    b.ToTable("BpmnActivityVar");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.DesignPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .HasColumnType("text");

                    b.Property<int>("SolutionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("DesignPattern");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DesignPattern");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.ProcessInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BpmnXml")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("WorkflowEngineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowEngineId");

                    b.ToTable("ProcessInstance");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.WorkflowEngine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAuthorizationRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWebModelerIncluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RestApi")
                        .HasColumnType("text");

                    b.Property<int>("SagaPatternId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SagaPatternId")
                        .IsUnique();

                    b.ToTable("WorkflowEngine");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.Deployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("DeploymentType")
                        .HasColumnType("integer");

                    b.Property<string>("DockerRegistry")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Deployment");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.DockerComposeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DockerComposeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Ports")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DockerComposeId");

                    b.ToTable("DockerComposeService");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.EnvironmentVar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("KubernetesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KubernetesId");

                    b.ToTable("EnvironmentVar");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.PersistenVolumeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("KubernetesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("RequiredStorage")
                        .HasColumnType("numeric");

                    b.Property<string>("StorageClass")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KubernetesId")
                        .IsUnique();

                    b.ToTable("PersistenVolumeClaim");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEngine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DbType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("DbEngine");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("AutoIncrement")
                        .HasColumnType("boolean");

                    b.Property<bool>("CreateDto")
                        .HasColumnType("boolean");

                    b.Property<int>("DbEngineId")
                        .HasColumnType("integer");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DbEngineId");

                    b.ToTable("DbEntity");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntityField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<int>("DbEntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DbEntityId");

                    b.ToTable("DbEntityField");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntityRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ToEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToEntityId");

                    b.ToTable("DbEntityRelationship");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.AppConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AppNamespace")
                        .HasColumnType("text");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("integer");

                    b.Property<string>("BaseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ServerPort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppConfig");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludeDockerFile")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SolutionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ParentFolderId")
                        .HasColumnType("integer");

                    b.Property<int>("SolutionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RepositoryName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("DockerComposeServiceEnvironmentVar", b =>
                {
                    b.Property<int>("DockerComposeServicesId")
                        .HasColumnType("integer");

                    b.Property<int>("EnvVarsId")
                        .HasColumnType("integer");

                    b.HasKey("DockerComposeServicesId", "EnvVarsId");

                    b.HasIndex("EnvVarsId");

                    b.ToTable("ServiceToEnvVars");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.SagaPattern", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.ArchitecturalPatterns.DesignPattern");

                    b.ToTable("DesignPattern");

                    b.HasDiscriminator().HasValue("SagaPattern");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.DockerCompose", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.Deployments.Deployment");

                    b.Property<bool>("IncludeDockerFile")
                        .HasColumnType("boolean");

                    b.ToTable("DockerCompose");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.Kubernetes", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.Deployments.Deployment");

                    b.Property<string>("IngressDomain")
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<int>("ReplicasAmount")
                        .HasColumnType("integer");

                    b.Property<int>("WorkloadType")
                        .HasColumnType("integer");

                    b.Property<string>("YamlConfig")
                        .HasColumnType("text");

                    b.ToTable("Kubernetes");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ApiGateway", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.SolutionAppConfig.Application");

                    b.ToTable("ApiGateway");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ClientApplication", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.SolutionAppConfig.Application");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("Framework")
                        .HasColumnType("text");

                    b.ToTable("ClientApplication");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.EventBus", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.SolutionAppConfig.Application");

                    b.ToTable("EventBus");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.FaaS", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.SolutionAppConfig.Application");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.ToTable("FaaS");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.Microservice", b =>
                {
                    b.HasBaseType("Ar.Generator.Data.Models.SolutionAppConfig.Application");

                    b.Property<int>("DbEngineId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceDiscoveryType")
                        .HasColumnType("integer");

                    b.Property<bool>("UseServiceLayer")
                        .HasColumnType("boolean");

                    b.HasIndex("DbEngineId");

                    b.ToTable("Microservice");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ApiEndpoint", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Applications.Microservice", "Microservice")
                        .WithMany("ApiEndpoints")
                        .HasForeignKey("MicroserviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Microservice");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.GatewayRoute", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Applications.ApiGateway", "Gateway")
                        .WithMany("GatewayRoutes")
                        .HasForeignKey("ApiGatewayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gateway");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivity", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivityHandler", "ActivityHandler")
                        .WithOne("BpmnActivity")
                        .HasForeignKey("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivity", "ActivityHandlerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ar.Generator.Data.Models.ArchitecturalPatterns.ProcessInstance", "ProcessInstance")
                        .WithMany("BpmnActivities")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityHandler");

                    b.Navigation("ProcessInstance");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivityHandler", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", "ResponsibleApplication")
                        .WithMany("BpmnActivityHandlers")
                        .HasForeignKey("ResponsibleApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResponsibleApplication");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivityVar", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivity", "BpmnActivity")
                        .WithMany("BpmnActivityVars")
                        .HasForeignKey("BpmnActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BpmnActivity");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.DesignPattern", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Solution", "Solution")
                        .WithMany("Patterns")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.ProcessInstance", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.ArchitecturalPatterns.WorkflowEngine", "WorkflowEngine")
                        .WithMany("ProcessInstances")
                        .HasForeignKey("WorkflowEngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkflowEngine");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.WorkflowEngine", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.ArchitecturalPatterns.SagaPattern", "SagaPattern")
                        .WithOne("WorkflowEngine")
                        .HasForeignKey("Ar.Generator.Data.Models.ArchitecturalPatterns.WorkflowEngine", "SagaPatternId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SagaPattern");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.Deployment", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", "Application")
                        .WithMany("Deployments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.DockerComposeService", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Deployments.DockerCompose", "DockerCompose")
                        .WithMany("DockerComposeServices")
                        .HasForeignKey("DockerComposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DockerCompose");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.EnvironmentVar", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Deployments.Kubernetes", "Kubernetes")
                        .WithMany("EnvVars")
                        .HasForeignKey("KubernetesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kubernetes");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.PersistenVolumeClaim", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Deployments.Kubernetes", "Kubernetes")
                        .WithOne("PVC")
                        .HasForeignKey("Ar.Generator.Data.Models.Deployments.PersistenVolumeClaim", "KubernetesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kubernetes");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntity", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.EntityModel.DbEngine", "DbEngine")
                        .WithMany("DbEntities")
                        .HasForeignKey("DbEngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DbEngine");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntityField", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.EntityModel.DbEntity", "DbEntity")
                        .WithMany("DbEntityFields")
                        .HasForeignKey("DbEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DbEntity");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntityRelationship", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.EntityModel.DbEntity", "ToEntity")
                        .WithMany("DbEntityRelationships")
                        .HasForeignKey("ToEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ToEntity");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Application", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.AppConfig", "Configuration")
                        .WithMany("Applications")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Solution", "Solution")
                        .WithMany("Applications")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Folder", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Solution", "Solution")
                        .WithMany("SolutionStructure")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentFolder");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("DockerComposeServiceEnvironmentVar", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Deployments.DockerComposeService", null)
                        .WithMany()
                        .HasForeignKey("DockerComposeServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ar.Generator.Data.Models.Deployments.EnvironmentVar", null)
                        .WithMany()
                        .HasForeignKey("EnvVarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.DockerCompose", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Deployments.Deployment", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Deployments.DockerCompose", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.Kubernetes", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.Deployments.Deployment", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Deployments.Kubernetes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ApiGateway", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Applications.ApiGateway", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ClientApplication", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Applications.ClientApplication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.EventBus", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Applications.EventBus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.FaaS", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Applications.FaaS", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.Microservice", b =>
                {
                    b.HasOne("Ar.Generator.Data.Models.EntityModel.DbEngine", "DatabaseEngine")
                        .WithMany("Microservices")
                        .HasForeignKey("DbEngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ar.Generator.Data.Models.SolutionAppConfig.Application", null)
                        .WithOne()
                        .HasForeignKey("Ar.Generator.Data.Models.Applications.Microservice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseEngine");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivity", b =>
                {
                    b.Navigation("BpmnActivityVars");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.BpmnActivityHandler", b =>
                {
                    b.Navigation("BpmnActivity");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.ProcessInstance", b =>
                {
                    b.Navigation("BpmnActivities");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.WorkflowEngine", b =>
                {
                    b.Navigation("ProcessInstances");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEngine", b =>
                {
                    b.Navigation("DbEntities");

                    b.Navigation("Microservices");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.EntityModel.DbEntity", b =>
                {
                    b.Navigation("DbEntityFields");

                    b.Navigation("DbEntityRelationships");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.AppConfig", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Application", b =>
                {
                    b.Navigation("BpmnActivityHandlers");

                    b.Navigation("Deployments");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Folder", b =>
                {
                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.SolutionAppConfig.Solution", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Patterns");

                    b.Navigation("SolutionStructure");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.ArchitecturalPatterns.SagaPattern", b =>
                {
                    b.Navigation("WorkflowEngine");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.DockerCompose", b =>
                {
                    b.Navigation("DockerComposeServices");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Deployments.Kubernetes", b =>
                {
                    b.Navigation("EnvVars");

                    b.Navigation("PVC");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.ApiGateway", b =>
                {
                    b.Navigation("GatewayRoutes");
                });

            modelBuilder.Entity("Ar.Generator.Data.Models.Applications.Microservice", b =>
                {
                    b.Navigation("ApiEndpoints");
                });
#pragma warning restore 612, 618
        }
    }
}
